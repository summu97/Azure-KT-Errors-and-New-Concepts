Steps to Generate Self-Signed Certificate Using a Config File:
sudo vim jenkins_openssl.cnf

[ req ]
default_bits       = 2048
default_md         = sha256
prompt             = no
encrypt_key        = no
distinguished_name = dn
x509_extensions    = v3_req

[ dn ]
C  = IN
ST = Karnataka
L  = Bangalore
O  = MyCompany
OU = DevOps
CN = your.vm.ip.or.hostname
emailAddress = you@example.com

[ v3_req ]
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = your.vm.ip.or.hostname
IP.1  = your.vm.ip.address

EX:
[ req ]
default_bits       = 2048
default_md         = sha256
prompt             = no
encrypt_key        = no
distinguished_name = dn
x509_extensions    = v3_req

[ dn ]
C  = IN
ST = hyderabad
L  = telangana
O  = MyCompany
OU = DevOps
CN = your.vm.ip.or.hostname
emailAddress = sumanth@jenkins.com

[ v3_req ]
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = 172.206.212.231
IP.1  = 172.206.212.231

‚úÖ Replace your.vm.ip.or.hostname and your.vm.ip.address with your actual values.

üîπ Step 2: Run OpenSSL with the config file
openssl req -x509 -nodes -days 365 \
  -newkey rsa:2048 \
  -keyout jenkins.key \
  -out jenkins.crt \
  -config jenkins_openssl.cnf

Output:
Jenkins.crt
Jenkins.key





Apply self-signed SSL certificates to your Jenkins Virtual Machine:
‚úÖ Step-by-step guide:
üßæ Prerequisites:
You have:

A self-signed certificate file (e.g. jenkins.crt)

A private key file (e.g. jenkins.key)

Jenkins is installed on a VM (Linux assumed) and accessible.

Configure Jenkins to use HTTPS directly:
üîß Step 1: Place the certificates
sudo mkdir -p /etc/jenkins/ssl
sudo cp jenkins.crt /etc/jenkins/ssl/
sudo cp jenkins.key /etc/jenkins/ssl/
sudo chmod 600 /etc/jenkins/ssl/*
sudo chown jenkins:jenkins /etc/jenkins/ssl/jenkins.*
sudo chmod 600 /etc/jenkins/ssl/jenkins.*



üîß Step 2: Update Jenkins config to enable HTTPS
sudo vim /etc/default/jenkins

Update these lines to disable HTTP and enable HTTPS on a proper port (like 8080):

Update this:
HTTP_PORT=8080
JENKINS_ARGS="--webroot=/var/cache/$NAME/war --httpPort=$HTTP_PORT"

to:
HTTP_PORT=-1
JENKINS_ARGS="--webroot=/var/cache/$NAME/war --httpsPort=8443 --httpsCertificate=/etc/jenkins/ssl/jenkins.crt --httpsPrivateKey=/etc/jenkins/ssl/jenkins.key"


üîß Step 3: Restart Jenkins
sudo systemctl restart jenkins

Now, access Jenkins via:
‚û°Ô∏è https://<your-vm-ip>:8443

NOTE: Allow NSG for 8443
----------------------------------------------------
Steps to enable HTTPS directly in Jenkins standalone with your certs
Convert your certificate and key to a Java Keystore (.jks)

Jenkins runs on Java, and the HTTPS support expects a keystore file.

You need to convert your jenkins.crt and jenkins.key into a PKCS12 file, then convert that to a Java keystore.

Example:

# Convert key + cert to PKCS12 keystore
openssl pkcs12 -export -in /etc/jenkins/ssl/jenkins.crt -inkey /etc/jenkins/ssl/jenkins.key -out /etc/jenkins/ssl/jenkins.p12 -name jenkins -password pass:changeit

# Import PKCS12 to Java keystore
keytool -importkeystore -deststorepass changeit -destkeypass changeit -destkeystore /etc/jenkins/ssl/jenkins.jks -srckeystore /etc/jenkins/ssl/jenkins.p12 -srcstoretype PKCS12 -srcstorepass changeit -alias jenkins


Modify /etc/default/jenkins to add Java SSL options

Edit your JAVA_ARGS to add:
JAVA_ARGS="-Djava.awt.headless=true \
  -Djenkins.install.runSetupWizard=false \
  -Dhttps.protocols=TLSv1.2 \
  -Djavax.net.ssl.keyStore=/etc/jenkins/ssl/jenkins.jks \
  -Djavax.net.ssl.keyStorePassword=changeit"


Set Jenkins to listen on HTTPS port
Set in /etc/default/jenkins:
HTTP_PORT=-1
JENKINS_ARGS="--httpsPort=8443"

sudo systemctl restart Jenkins
sudo ss -tuln | grep 8443
